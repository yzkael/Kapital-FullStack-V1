{"mappings":";;;;;;;;;;;;;AAeO,SAAS,0CAAoB,KAAuB;IACzD,IAAI,QAAQ,CAAA,GAAA,kCAAO,EAAE,MAAM,KAAK;IAChC,IAAI,eAAe,CAAA,GAAA,kCAAO,EAAE,MAAM,YAAY,IAAI;IAClD,IAAI,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,2CAAiB,EAAE,SAAS,WAAW,cAAc,MAAM,QAAQ;IAE3F,OAAO;eACL;QACA,UAAS,KAAK;YACZ,IAAI,SAAS,MACX,SAAS,SAAS,CAAA,GAAA,oCAAS,EAAE;QAEjC;IACF;AACF","sources":["packages/@react-stately/color/src/useColorPickerState.ts"],"sourcesContent":["import {Color} from '@react-types/color';\nimport {parseColor} from './Color';\nimport {useColor} from './useColor';\nimport {useControlledState} from '@react-stately/utils';\nimport {ValueBase} from '@react-types/shared';\n\nexport interface ColorPickerProps extends ValueBase<string | Color, Color> {}\n\nexport interface ColorPickerState {\n  /** The current color value of the color picker. */\n  color: Color,\n  /** Sets the current color value of the color picker. */\n  setColor(color: Color | null): void\n}\n\nexport function useColorPickerState(props: ColorPickerProps): ColorPickerState {\n  let value = useColor(props.value);\n  let defaultValue = useColor(props.defaultValue || '#000000')!;\n  let [color, setColor] = useControlledState(value || undefined, defaultValue, props.onChange);\n  \n  return {\n    color,\n    setColor(color) {\n      if (color != null) {\n        setColor(color || parseColor('#000000'));\n      }\n    }\n  };\n}\n"],"names":[],"version":3,"file":"useColorPickerState.main.js.map"}