{"mappings":"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","sources":["packages/@react-aria/collections/src/Document.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseCollection, CollectionNode, Mutable} from './BaseCollection';\nimport {ForwardedRef, ReactElement} from 'react';\nimport {Node} from '@react-types/shared';\n\n// This Collection implementation is perhaps a little unusual. It works by rendering the React tree into a\n// Portal to a fake DOM implementation. This gives us efficient access to the tree of rendered objects, and\n// supports React features like composition and context. We use this fake DOM to access the full set of elements\n// before we render into the real DOM, which allows us to render a subset of the elements (e.g. virtualized scrolling),\n// and compute properties like the total number of items. It also enables keyboard navigation, selection, and other features.\n// React takes care of efficiently rendering components and updating the collection for us via this fake DOM.\n//\n// The DOM is a mutable API, and React expects the node instances to remain stable over time. So the implementation is split\n// into two parts. Each mutable fake DOM node owns an instance of an immutable collection node. When a fake DOM node is updated,\n// it queues a second render for the collection. Multiple updates to a collection can be queued at once. Collection nodes are\n// lazily copied on write, so only the changed nodes need to be cloned. During the second render, the new immutable collection\n// is finalized by updating the map of Key -> Node with the new cloned nodes. Then the new collection is frozen so it can no\n// longer be mutated, and returned to the calling component to render.\n\n/**\n * A mutable node in the fake DOM tree. When mutated, it marks itself as dirty\n * and queues an update with the owner document.\n */\nexport class BaseNode<T> {\n  private _firstChild: ElementNode<T> | null = null;\n  private _lastChild: ElementNode<T> | null = null;\n  private _previousSibling: ElementNode<T> | null = null;\n  private _nextSibling: ElementNode<T> | null = null;\n  private _parentNode: BaseNode<T> | null = null;\n  ownerDocument: Document<T, any>;\n\n  constructor(ownerDocument: Document<T, any>) {\n    this.ownerDocument = ownerDocument;\n  }\n\n  *[Symbol.iterator]() {\n    let node = this.firstChild;\n    while (node) {\n      yield node;\n      node = node.nextSibling;\n    }\n  }\n\n  get firstChild() {\n    return this._firstChild;\n  }\n\n  set firstChild(firstChild) {\n    this._firstChild = firstChild;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get lastChild() {\n    return this._lastChild;\n  }\n\n  set lastChild(lastChild) {\n    this._lastChild = lastChild;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get previousSibling() {\n    return this._previousSibling;\n  }\n\n  set previousSibling(previousSibling) {\n    this._previousSibling = previousSibling;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get nextSibling() {\n    return this._nextSibling;\n  }\n\n  set nextSibling(nextSibling) {\n    this._nextSibling = nextSibling;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get parentNode() {\n    return this._parentNode;\n  }\n\n  set parentNode(parentNode) {\n    this._parentNode = parentNode;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get isConnected() {\n    return this.parentNode?.isConnected || false;\n  }\n\n  appendChild(child: ElementNode<T>) {\n    this.ownerDocument.startTransaction();\n    if (child.parentNode) {\n      child.parentNode.removeChild(child);\n    }\n\n    if (this.firstChild == null) {\n      this.firstChild = child;\n    }\n\n    if (this.lastChild) {\n      this.lastChild.nextSibling = child;\n      child.index = this.lastChild.index + 1;\n      child.previousSibling = this.lastChild;\n    } else {\n      child.previousSibling = null;\n      child.index = 0;\n    }\n\n    child.parentNode = this;\n    child.nextSibling = null;\n    this.lastChild = child;\n\n    this.ownerDocument.markDirty(this);\n    if (child.hasSetProps) {\n      // Only add the node to the collection if we already received props for it.\n      // Otherwise wait until then so we have the correct id for the node.\n      this.ownerDocument.addNode(child);\n    }\n\n    this.ownerDocument.endTransaction();\n    this.ownerDocument.queueUpdate();\n  }\n\n  insertBefore(newNode: ElementNode<T>, referenceNode: ElementNode<T>) {\n    if (referenceNode == null) {\n      return this.appendChild(newNode);\n    }\n\n    this.ownerDocument.startTransaction();\n    if (newNode.parentNode) {\n      newNode.parentNode.removeChild(newNode);\n    }\n\n    newNode.nextSibling = referenceNode;\n    newNode.previousSibling = referenceNode.previousSibling;\n    newNode.index = referenceNode.index;\n\n    if (this.firstChild === referenceNode) {\n      this.firstChild = newNode;\n    } else if (referenceNode.previousSibling) {\n      referenceNode.previousSibling.nextSibling = newNode;\n    }\n\n    referenceNode.previousSibling = newNode;\n    newNode.parentNode = referenceNode.parentNode;\n\n    let node: ElementNode<T> | null = referenceNode;\n    while (node) {\n      node.index++;\n      node = node.nextSibling;\n    }\n\n    if (newNode.hasSetProps) {\n      this.ownerDocument.addNode(newNode);\n    }\n\n    this.ownerDocument.endTransaction();\n    this.ownerDocument.queueUpdate();\n  }\n\n  removeChild(child: ElementNode<T>) {\n    if (child.parentNode !== this || !this.ownerDocument.isMounted) {\n      return;\n    }\n\n    this.ownerDocument.startTransaction();\n    let node = child.nextSibling;\n    while (node) {\n      node.index--;\n      node = node.nextSibling;\n    }\n\n    if (child.nextSibling) {\n      child.nextSibling.previousSibling = child.previousSibling;\n    }\n\n    if (child.previousSibling) {\n      child.previousSibling.nextSibling = child.nextSibling;\n    }\n\n    if (this.firstChild === child) {\n      this.firstChild = child.nextSibling;\n    }\n\n    if (this.lastChild === child) {\n      this.lastChild = child.previousSibling;\n    }\n\n    child.parentNode = null;\n    child.nextSibling = null;\n    child.previousSibling = null;\n    child.index = 0;\n\n    this.ownerDocument.removeNode(child);\n    this.ownerDocument.endTransaction();\n    this.ownerDocument.queueUpdate();\n  }\n\n  addEventListener() {}\n  removeEventListener() {}\n}\n\n/**\n * A mutable element node in the fake DOM tree. It owns an immutable\n * Collection Node which is copied on write.\n */\nexport class ElementNode<T> extends BaseNode<T> {\n  nodeType = 8; // COMMENT_NODE (we'd use ELEMENT_NODE but React DevTools will fail to get its dimensions)\n  node: CollectionNode<T>;\n  private _index: number = 0;\n  hasSetProps = false;\n\n  constructor(type: string, ownerDocument: Document<T, any>) {\n    super(ownerDocument);\n    this.node = new CollectionNode(type, `react-aria-${++ownerDocument.nodeId}`);\n    // Start a transaction so that no updates are emitted from the collection\n    // until the props for this node are set. We don't know the real id for the\n    // node until then, so we need to avoid emitting collections in an inconsistent state.\n    this.ownerDocument.startTransaction();\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  set index(index) {\n    this._index = index;\n    this.ownerDocument.markDirty(this);\n  }\n\n  get level(): number {\n    if (this.parentNode instanceof ElementNode) {\n      return this.parentNode.level + (this.node.type === 'item' ? 1 : 0);\n    }\n\n    return 0;\n  }\n\n  updateNode() {\n    let node = this.ownerDocument.getMutableNode(this);\n    node.index = this.index;\n    node.level = this.level;\n    node.parentKey = this.parentNode instanceof ElementNode ? this.parentNode.node.key : null;\n    node.prevKey = this.previousSibling?.node.key ?? null;\n    node.nextKey = this.nextSibling?.node.key ?? null;\n    node.hasChildNodes = !!this.firstChild;\n    node.firstChildKey = this.firstChild?.node.key ?? null;\n    node.lastChildKey = this.lastChild?.node.key ?? null;\n  }\n\n  setProps<E extends Element>(obj: any, ref: ForwardedRef<E>, rendered?: any, render?: (node: Node<T>) => ReactElement) {\n    let node = this.ownerDocument.getMutableNode(this);\n    let {value, textValue, id, ...props} = obj;\n    props.ref = ref;\n    node.props = props;\n    node.rendered = rendered;\n    node.render = render;\n    node.value = value;\n    node.textValue = textValue || (typeof props.children === 'string' ? props.children : '') || obj['aria-label'] || '';\n    if (id != null && id !== node.key) {\n      if (this.hasSetProps) {\n        throw new Error('Cannot change the id of an item');\n      }\n      node.key = id;\n    }\n\n    // If this is the first time props have been set, end the transaction started in the constructor\n    // so this node can be emitted.\n    if (!this.hasSetProps) {\n      this.ownerDocument.addNode(this);\n      this.ownerDocument.endTransaction();\n      this.hasSetProps = true;\n    }\n\n    this.ownerDocument.queueUpdate();\n  }\n\n  get style() {\n    return {};\n  }\n\n  hasAttribute() {}\n  setAttribute() {}\n  setAttributeNS() {}\n  removeAttribute() {}\n}\n\n/**\n * A mutable Document in the fake DOM. It owns an immutable Collection instance,\n * which is lazily copied on write during updates.\n */\nexport class Document<T, C extends BaseCollection<T> = BaseCollection<T>> extends BaseNode<T> {\n  nodeType = 11; // DOCUMENT_FRAGMENT_NODE\n  ownerDocument = this;\n  dirtyNodes: Set<BaseNode<T>> = new Set();\n  isSSR = false;\n  nodeId = 0;\n  nodesByProps = new WeakMap<object, ElementNode<T>>();\n  isMounted = true;\n  private collection: C;\n  private collectionMutated: boolean;\n  private mutatedNodes: Set<ElementNode<T>> = new Set();\n  private subscriptions: Set<() => void> = new Set();\n  private transactionCount = 0;\n\n  constructor(collection: C) {\n    // @ts-ignore\n    super(null);\n    this.collection = collection;\n    this.collectionMutated = true;\n  }\n\n  get isConnected() {\n    return this.isMounted;\n  }\n\n  createElement(type: string) {\n    return new ElementNode(type, this);\n  }\n\n  /**\n   * Lazily gets a mutable instance of a Node. If the node has already\n   * been cloned during this update cycle, it just returns the existing one.\n   */\n  getMutableNode(element: ElementNode<T>): Mutable<CollectionNode<T>> {\n    let node = element.node;\n    if (!this.mutatedNodes.has(element)) {\n      node = element.node.clone();\n      this.mutatedNodes.add(element);\n      element.node = node;\n    }\n    this.markDirty(element);\n    return node;\n  }\n\n  private getMutableCollection() {\n    if (!this.isSSR && !this.collectionMutated) {\n      this.collection = this.collection.clone();\n      this.collectionMutated = true;\n    }\n\n    return this.collection;\n  }\n\n  markDirty(node: BaseNode<T>) {\n    this.dirtyNodes.add(node);\n  }\n\n  startTransaction() {\n    this.transactionCount++;\n  }\n\n  endTransaction() {\n    this.transactionCount--;\n  }\n\n  addNode(element: ElementNode<T>) {\n    let collection = this.getMutableCollection();\n    if (!collection.getItem(element.node.key)) {\n      collection.addNode(element.node);\n\n      for (let child of element) {\n        this.addNode(child);\n      }\n    }\n\n    this.markDirty(element);\n  }\n\n  removeNode(node: ElementNode<T>) {\n    for (let child of node) {\n      this.removeNode(child);\n    }\n\n    let collection = this.getMutableCollection();\n    collection.removeNode(node.node.key);\n    this.markDirty(node);\n  }\n\n  /** Finalizes the collection update, updating all nodes and freezing the collection. */\n  getCollection(): C {\n    if (this.transactionCount > 0) {\n      return this.collection;\n    }\n\n    this.updateCollection();\n    return this.collection;\n  }\n\n  updateCollection() {\n    for (let element of this.dirtyNodes) {\n      if (element instanceof ElementNode && element.isConnected) {\n        element.updateNode();\n      }\n    }\n\n    this.dirtyNodes.clear();\n\n    if (this.mutatedNodes.size || this.collectionMutated) {\n      let collection = this.getMutableCollection();\n      for (let element of this.mutatedNodes) {\n        if (element.isConnected) {\n          collection.addNode(element.node);\n        }\n      }\n\n      collection.commit(this.firstChild?.node.key ?? null, this.lastChild?.node.key ?? null, this.isSSR);\n      this.mutatedNodes.clear();\n    }\n\n    this.collectionMutated = false;\n  }\n\n  queueUpdate() {\n    // Don't emit any updates if there is a transaction in progress.\n    // queueUpdate should be called again after the transaction.\n    if (this.dirtyNodes.size === 0 || this.transactionCount > 0) {\n      return;\n    }\n\n    for (let fn of this.subscriptions) {\n      fn();\n    }\n  }\n\n  subscribe(fn: () => void) {\n    this.subscriptions.add(fn);\n    return () => this.subscriptions.delete(fn);\n  }\n\n  resetAfterSSR() {\n    if (this.isSSR) {\n      this.isSSR = false;\n      this.firstChild = null;\n      this.lastChild = null;\n      this.nodeId = 0;\n    }\n  }\n}\n"],"names":[],"version":3,"file":"Document.module.js.map"}