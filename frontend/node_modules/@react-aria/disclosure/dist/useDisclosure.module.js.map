{"mappings":";;;;;AAAA;;;;;;;;;;CAUC;;;;AAiCM,SAAS,0CAAc,KAA0B,EAAE,KAAsB,EAAE,GAA8B;IAC9G,IAAI,cACF,UAAU,EACX,GAAG;IACJ,IAAI,YAAY,CAAA,GAAA,YAAI;IACpB,IAAI,UAAU,CAAA,GAAA,YAAI;IAClB,IAAI,QAAQ,CAAA,GAAA,eAAO;IACnB,IAAI,sBAAsB,CAAC,SAAS,mBAAmB,SAAS,IAAI;IAEpE,IAAI,MAAM,CAAA,GAAA,aAAK,EAAiB;IAEhC,IAAI,oBAAoB,CAAA,GAAA,kBAAU,EAAE;QAClC,+DAA+D;QAC/D,IAAI,OAAO,GAAG,sBAAsB;YAClC,IAAI,IAAI,OAAO,EACb,IAAI,OAAO,CAAC,YAAY,CAAC,UAAU;QAEvC;QACA,0BAA0B;QAC1B,CAAA,GAAA,gBAAQ,EAAE;YACR,MAAM,MAAM;QACd;IACF,GAAG;QAAC;QAAK;KAAM;IAEf,0DAA0D;IAC1D,CAAA,GAAA,eAAO,EAAE,KAAK,eAAe,sBAAsB,oBAAoB;IAEvE,CAAA,GAAA,sBAAc,EAAE;QACd,kDAAkD;QAClD,IAAI,IAAI,OAAO,EACb,qBAAqB,IAAI,OAAO;QAElC,0FAA0F;QAC1F,IAAI,uBAAuB,IAAI,OAAO,IAAI,CAAC;YACzC,IAAI,MAAM,UAAU,EAClB,IAAI,OAAO,CAAC,eAAe,CAAC;iBAE5B,IAAI,OAAO,CAAC,YAAY,CAAC,UAAU;;IAGzC,GAAG;QAAC;QAAY;QAAK,MAAM,UAAU;QAAE;KAAoB;IAE3D,CAAA,GAAA,gBAAQ,EAAE;QACR,OAAO;YACL,IAAI,IAAI,OAAO,EACb,qBAAqB,IAAI,OAAO;QAEpC;IACF,GAAG,EAAE;IAEL,OAAO;QACL,aAAa;YACX,IAAI;YACJ,iBAAiB,MAAM,UAAU;YACjC,iBAAiB;YACjB,SAAS,CAAC;gBACR,IAAI,CAAC,cAAc,EAAE,WAAW,KAAK,YACnC,MAAM,MAAM;YAEhB;wBACA;YACA,cAAa,CAAC;gBACZ,IAAI,EAAE,WAAW,KAAK,cAAc,CAAC,YACnC,MAAM,MAAM;YAEhB;QACF;QACA,YAAY;YACV,IAAI;YACJ,qDAAqD;YACrD,MAAM;YACN,mBAAmB;YACnB,eAAe,CAAC,MAAM,UAAU;YAChC,QAAQ,sBAAsB,OAAO,CAAC,MAAM,UAAU;QACxD;IACF;AACF","sources":["packages/@react-aria/disclosure/src/useDisclosure.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DisclosureState} from '@react-stately/disclosure';\nimport {flushSync} from 'react-dom';\nimport {HTMLAttributes, RefObject, useCallback, useEffect, useRef} from 'react';\nimport {useEvent, useId, useLayoutEffect} from '@react-aria/utils';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport interface AriaDisclosureProps {\n  /** Whether the disclosure is disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the disclosure's expanded state changes. */\n  onExpandedChange?: (isExpanded: boolean) => void,\n  /** Whether the disclosure is expanded (controlled). */\n  isExpanded?: boolean,\n  /** Whether the disclosure is expanded by default (uncontrolled). */\n  defaultExpanded?: boolean\n}\n\nexport interface DisclosureAria {\n  /** Props for the disclosure button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the disclosure panel. */\n  panelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a disclosure component.\n * @param props - Props for the disclosure.\n * @param state - State for the disclosure, as returned by `useDisclosureState`.\n * @param ref - A ref for the disclosure panel.\n */\nexport function useDisclosure(props: AriaDisclosureProps, state: DisclosureState, ref: RefObject<Element | null>): DisclosureAria {\n  let {\n    isDisabled\n  } = props;\n  let triggerId = useId();\n  let panelId = useId();\n  let isSSR = useIsSSR();\n  let supportsBeforeMatch = !isSSR && 'onbeforematch' in document.body;\n\n  let raf = useRef<number | null>(null);\n\n  let handleBeforeMatch = useCallback(() => {\n    // Wait a frame to revert browser's removal of hidden attribute\n    raf.current = requestAnimationFrame(() => {\n      if (ref.current) {\n        ref.current.setAttribute('hidden', 'until-found');\n      }\n    });\n    // Force sync state update\n    flushSync(() => {\n      state.toggle();\n    });\n  }, [ref, state]);\n\n  // @ts-ignore https://github.com/facebook/react/pull/24741\n  useEvent(ref, 'beforematch', supportsBeforeMatch ? handleBeforeMatch : null);\n\n  useLayoutEffect(() => {\n    // Cancel any pending RAF to prevent stale updates\n    if (raf.current) {\n      cancelAnimationFrame(raf.current);\n    }\n    // Until React supports hidden=\"until-found\": https://github.com/facebook/react/pull/24741\n    if (supportsBeforeMatch && ref.current && !isDisabled) {\n      if (state.isExpanded) {\n        ref.current.removeAttribute('hidden');\n      } else {\n        ref.current.setAttribute('hidden', 'until-found');\n      }\n    }\n  }, [isDisabled, ref, state.isExpanded, supportsBeforeMatch]);\n\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, []);\n\n  return {\n    buttonProps: {\n      id: triggerId,\n      'aria-expanded': state.isExpanded,\n      'aria-controls': panelId,\n      onPress: (e) => {\n        if (!isDisabled && e.pointerType !== 'keyboard') {\n          state.toggle();\n        }\n      },\n      isDisabled,\n      onPressStart(e) {\n        if (e.pointerType === 'keyboard' && !isDisabled) {\n          state.toggle();\n        }\n      }\n    },\n    panelProps: {\n      id: panelId,\n      // This can be overridden at the panel element level.\n      role: 'group',\n      'aria-labelledby': triggerId,\n      'aria-hidden': !state.isExpanded,\n      hidden: supportsBeforeMatch ? true : !state.isExpanded\n    }\n  };\n}\n"],"names":[],"version":3,"file":"useDisclosure.module.js.map"}