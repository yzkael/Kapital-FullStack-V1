{"mappings":"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","sources":["packages/react-aria-components/src/Calendar.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n  AriaCalendarProps,\n  AriaRangeCalendarProps,\n  DateValue,\n  mergeProps,\n  useCalendar,\n  useCalendarCell,\n  useCalendarGrid,\n  useFocusRing,\n  useHover,\n  useLocale,\n  useRangeCalendar,\n  VisuallyHidden\n} from 'react-aria';\nimport {ButtonContext} from './Button';\nimport {CalendarDate, createCalendar, DateDuration, endOfMonth, getWeeksInMonth, isSameDay, isSameMonth} from '@internationalized/date';\nimport {CalendarState, RangeCalendarState, useCalendarState, useRangeCalendarState} from 'react-stately';\nimport {ContextValue, DOMProps, Provider, RenderProps, SlotProps, StyleProps, useContextProps, useRenderProps, useSlottedContext} from './utils';\nimport {DOMAttributes, FocusableElement, forwardRefType, HoverEvents} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {HeadingContext} from './RSPContexts';\nimport React, {createContext, ForwardedRef, forwardRef, ReactElement, useContext, useRef} from 'react';\nimport {TextContext} from './Text';\n\nexport interface CalendarRenderProps {\n  /**\n   * Whether the calendar is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * State of the calendar.\n   */\n  state: CalendarState,\n  /**\n   * Whether the calendar is invalid.\n   * @selector [data-invalid]\n   */\n  isInvalid: boolean\n}\n\nexport interface RangeCalendarRenderProps extends Omit<CalendarRenderProps, 'state'> {\n  /**\n   * State of the range calendar.\n   */\n  state: RangeCalendarState\n}\n\nexport interface CalendarProps<T extends DateValue> extends Omit<AriaCalendarProps<T>, 'errorMessage' | 'validationState'>, RenderProps<CalendarRenderProps>, SlotProps {\n  /**\n   * The amount of days that will be displayed at once. This affects how pagination works.\n   * @default {months: 1}\n   */\n  visibleDuration?: DateDuration\n}\n\nexport interface RangeCalendarProps<T extends DateValue> extends Omit<AriaRangeCalendarProps<T>, 'errorMessage' | 'validationState'>, RenderProps<RangeCalendarRenderProps>, SlotProps {\n  /**\n   * The amount of days that will be displayed at once. This affects how pagination works.\n   * @default {months: 1}\n   */\n  visibleDuration?: DateDuration\n}\n\nexport const CalendarContext = createContext<ContextValue<CalendarProps<any>, HTMLDivElement>>(null);\nexport const RangeCalendarContext = createContext<ContextValue<RangeCalendarProps<any>, HTMLDivElement>>(null);\nexport const CalendarStateContext = createContext<CalendarState | null>(null);\nexport const RangeCalendarStateContext = createContext<RangeCalendarState | null>(null);\n\n/**\n * A calendar displays one or more date grids and allows users to select a single date.\n */\nexport const Calendar = /*#__PURE__*/ (forwardRef as forwardRefType)(function Calendar<T extends DateValue>(props: CalendarProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, CalendarContext);\n  let {locale} = useLocale();\n  let state = useCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let {calendarProps, prevButtonProps, nextButtonProps, errorMessageProps, title} = useCalendar(props, state);\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: {\n      state,\n      isDisabled: props.isDisabled || false,\n      isInvalid: state.isValueInvalid\n    },\n    defaultClassName: 'react-aria-Calendar'\n  });\n\n  return (\n    <div\n      {...renderProps}\n      {...calendarProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      data-disabled={props.isDisabled || undefined}\n      data-invalid={state.isValueInvalid || undefined}>\n      <Provider\n        values={[\n          [ButtonContext, {\n            slots: {\n              previous: prevButtonProps,\n              next: nextButtonProps\n            }\n          }],\n          [HeadingContext, {'aria-hidden': true, level: 2, children: title}],\n          [CalendarStateContext, state],\n          [CalendarContext, props as CalendarProps<any>],\n          [TextContext, {\n            slots: {\n              errorMessage: errorMessageProps\n            }\n          }]\n        ]}>\n        {/* Add a screen reader only description of the entire visible range rather than\n          * a separate heading above each month grid. This is placed first in the DOM order\n          * so that it is the first thing a touch screen reader user encounters.\n          * In addition, VoiceOver on iOS does not announce the aria-label of the grid\n          * elements, so the aria-label of the Calendar is included here as well. */}\n        <VisuallyHidden>\n          <h2>{calendarProps['aria-label']}</h2>\n        </VisuallyHidden>\n        {renderProps.children}\n        {/* For touch screen readers, add a visually hidden next button after the month grid\n          * so it's easy to navigate after reaching the end without going all the way\n          * back to the start of the month. */}\n        <VisuallyHidden>\n          <button\n            aria-label={nextButtonProps['aria-label']}\n            disabled={nextButtonProps.isDisabled}\n            onClick={() => state.focusNextPage()}\n            tabIndex={-1} />\n        </VisuallyHidden>\n      </Provider>\n    </div>\n  );\n});\n\n/**\n * A range calendar displays one or more date grids and allows users to select a contiguous range of dates.\n */\nexport const RangeCalendar = /*#__PURE__*/ (forwardRef as forwardRefType)(function RangeCalendar<T extends DateValue>(props: RangeCalendarProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, RangeCalendarContext);\n  let {locale} = useLocale();\n  let state = useRangeCalendarState({\n    ...props,\n    locale,\n    createCalendar\n  });\n\n  let {calendarProps, prevButtonProps, nextButtonProps, errorMessageProps, title} = useRangeCalendar(\n    props,\n    state,\n    ref\n  );\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: {\n      state,\n      isDisabled: props.isDisabled || false,\n      isInvalid: state.isValueInvalid\n    },\n    defaultClassName: 'react-aria-RangeCalendar'\n  });\n\n  return (\n    <div\n      {...renderProps}\n      {...calendarProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      data-disabled={props.isDisabled || undefined}\n      data-invalid={state.isValueInvalid || undefined}>\n      <Provider\n        values={[\n          [ButtonContext, {\n            slots: {\n              previous: prevButtonProps,\n              next: nextButtonProps\n            }\n          }],\n          [HeadingContext, {'aria-hidden': true, level: 2, children: title}],\n          [RangeCalendarStateContext, state],\n          [RangeCalendarContext, props as RangeCalendarProps<any>],\n          [TextContext, {\n            slots: {\n              errorMessage: errorMessageProps\n            }\n          }]\n        ]}>\n        {/* Add a screen reader only description of the entire visible range rather than\n          * a separate heading above each month grid. This is placed first in the DOM order\n          * so that it is the first thing a touch screen reader user encounters.\n          * In addition, VoiceOver on iOS does not announce the aria-label of the grid\n          * elements, so the aria-label of the Calendar is included here as well. */}\n        <VisuallyHidden>\n          <h2>{calendarProps['aria-label']}</h2>\n        </VisuallyHidden>\n        {renderProps.children}\n        {/* For touch screen readers, add a visually hidden next button after the month grid\n          * so it's easy to navigate after reaching the end without going all the way\n          * back to the start of the month. */}\n        <VisuallyHidden>\n          <button\n            aria-label={nextButtonProps['aria-label']}\n            disabled={nextButtonProps.isDisabled}\n            onClick={() => state.focusNextPage()}\n            tabIndex={-1} />\n        </VisuallyHidden>\n      </Provider>\n    </div>\n  );\n});\n\nexport interface CalendarCellRenderProps {\n  /** The date that the cell represents. */\n  date: CalendarDate,\n  /** The day number formatted according to the current locale. */\n  formattedDate: string,\n  /**\n   * Whether the cell is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the cell is currently being pressed.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the cell is selected.\n   * @selector [data-selected]\n   */\n  isSelected: boolean,\n  /**\n   * Whether the cell is the first date in a range selection.\n   * @selector [data-selection-start]\n   */\n  isSelectionStart: boolean,\n  /**\n   * Whether the cell is the last date in a range selection.\n   * @selector [data-selection-end]\n   */\n  isSelectionEnd: boolean,\n  /**\n   * Whether the cell is focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the cell is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the cell is disabled, according to the calendar's `minValue`, `maxValue`, and `isDisabled` props.\n   * Disabled dates are not focusable, and cannot be selected by the user. They are typically\n   * displayed with a dimmed appearance.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the cell is outside the visible range of the calendar.\n   * For example, dates before the first day of a month in the same week.\n   * @selector [data-outside-visible-range]\n   */\n  isOutsideVisibleRange: boolean,\n  /**\n   * Whether the cell is outside the current month.\n   * @selector [data-outside-month]\n   */\n  isOutsideMonth: boolean,\n  /**\n   * Whether the cell is unavailable, according to the calendar's `isDateUnavailable` prop. Unavailable dates remain\n   * focusable, but cannot be selected by the user. They should be displayed with a visual affordance to indicate they\n   * are unavailable, such as a different color or a strikethrough.\n   *\n   * Note that because they are focusable, unavailable dates must meet a 4.5:1 color contrast ratio,\n   * [as defined by WCAG](https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html).\n   *\n   * @selector [data-unavailable]\n   */\n  isUnavailable: boolean,\n  /**\n   * Whether the cell is part of an invalid selection.\n   * @selector [data-invalid]\n   */\n  isInvalid: boolean\n}\n\nexport interface CalendarGridProps extends StyleProps {\n  /**\n   * Either a function to render calendar cells for each date in the month,\n   * or children containing a `<CalendarGridHeader>`` and `<CalendarGridBody>`\n   * when additional customization is needed.\n   */\n  children?: ReactElement | ReactElement[] | ((date: CalendarDate) => ReactElement),\n  /**\n   * An offset from the beginning of the visible date range that this\n   * CalendarGrid should display. Useful when displaying more than one\n   * month at a time.\n   */\n  offset?: DateDuration,\n  /**\n   * The style of weekday names to display in the calendar grid header,\n   * e.g. single letter, abbreviation, or full day name.\n   * @default \"narrow\"\n   */\n  weekdayStyle?: 'narrow' | 'short' | 'long'\n}\n\ninterface InternalCalendarGridContextValue {\n  headerProps: DOMAttributes<FocusableElement>,\n  weekDays: string[],\n  startDate: CalendarDate,\n  firstDayOfWeek: 'sun' | 'mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat' | undefined\n}\n\nconst InternalCalendarGridContext = createContext<InternalCalendarGridContextValue | null>(null);\n\n/**\n * A calendar grid displays a single grid of days within a calendar or range calendar which\n * can be keyboard navigated and selected by the user.\n */\nexport const CalendarGrid = /*#__PURE__*/ (forwardRef as forwardRefType)(function CalendarGrid(props: CalendarGridProps, ref: ForwardedRef<HTMLTableElement>) {\n  let calendarState = useContext(CalendarStateContext);\n  let rangeCalendarState = useContext(RangeCalendarStateContext);\n  let calenderProps = useSlottedContext(CalendarContext)!;\n  let rangeCalenderProps = useSlottedContext(RangeCalendarContext)!;\n  let state = calendarState ?? rangeCalendarState!;\n  let startDate = state.visibleRange.start;\n  if (props.offset) {\n    startDate = startDate.add(props.offset);\n  }\n\n  let firstDayOfWeek = calenderProps?.firstDayOfWeek ?? rangeCalenderProps?.firstDayOfWeek;\n\n  let {gridProps, headerProps, weekDays} = useCalendarGrid({\n    startDate,\n    endDate: endOfMonth(startDate),\n    weekdayStyle: props.weekdayStyle,\n    firstDayOfWeek\n  }, state);\n\n  return (\n    <InternalCalendarGridContext.Provider value={{headerProps, weekDays, startDate, firstDayOfWeek}}>\n      <table\n        {...filterDOMProps(props as any)}\n        {...gridProps}\n        ref={ref}\n        style={props.style}\n        className={props.className ?? 'react-aria-CalendarGrid'}>\n        {typeof props.children !== 'function'\n          ? props.children\n          : (<>\n            <CalendarGridHeaderForwardRef>\n              {day => <CalendarHeaderCellForwardRef>{day}</CalendarHeaderCellForwardRef>}\n            </CalendarGridHeaderForwardRef>\n            <CalendarGridBodyForwardRef>\n              {props.children}\n            </CalendarGridBodyForwardRef>\n          </>)\n        }\n      </table>\n    </InternalCalendarGridContext.Provider>\n  );\n});\n\nexport interface CalendarGridHeaderProps extends StyleProps {\n  /** A function to render a `<CalendarHeaderCell>` for a weekday name. */\n  children: (day: string) => ReactElement\n}\n\nfunction CalendarGridHeader(props: CalendarGridHeaderProps, ref: ForwardedRef<HTMLTableSectionElement>) {\n  let {children, style, className} = props;\n  let {headerProps, weekDays} = useContext(InternalCalendarGridContext)!;\n\n  return (\n    <thead\n      {...filterDOMProps(props as any)}\n      {...headerProps}\n      ref={ref}\n      style={style}\n      className={className || 'react-aria-CalendarGridHeader'}>\n      <tr>\n        {weekDays.map((day, key) => React.cloneElement(children(day), {key}))}\n      </tr>\n    </thead>\n  );\n}\n\n/**\n * A calendar grid header displays a row of week day names at the top of a month.\n */\nconst CalendarGridHeaderForwardRef = /*#__PURE__*/ (forwardRef as forwardRefType)(CalendarGridHeader);\nexport {CalendarGridHeaderForwardRef as CalendarGridHeader};\n\nexport interface CalendarHeaderCellProps extends DOMProps {}\n\nfunction CalendarHeaderCell(props: CalendarHeaderCellProps, ref: ForwardedRef<HTMLTableCellElement>) {\n  let {children, style, className} = props;\n  return (\n    <th\n      {...filterDOMProps(props as any)}\n      ref={ref}\n      style={style}\n      className={className || 'react-aria-CalendarHeaderCell'}>\n      {children}\n    </th>\n  );\n}\n\n/**\n * A calendar header cell displays a week day name at the top of a column within a calendar.\n */\nconst CalendarHeaderCellForwardRef = forwardRef(CalendarHeaderCell);\nexport {CalendarHeaderCellForwardRef as CalendarHeaderCell};\n\nexport interface CalendarGridBodyProps extends StyleProps {\n  /** A function to render a `<CalendarCell>` for a given date. */\n  children: (date: CalendarDate) => ReactElement\n}\n\nfunction CalendarGridBody(props: CalendarGridBodyProps, ref: ForwardedRef<HTMLTableSectionElement>) {\n  let {children, style, className} = props;\n  let calendarState = useContext(CalendarStateContext);\n  let rangeCalendarState = useContext(RangeCalendarStateContext);\n  let state = calendarState ?? rangeCalendarState!;\n  let {startDate, firstDayOfWeek} = useContext(InternalCalendarGridContext)!;\n  let {locale} = useLocale();\n  let weeksInMonth = getWeeksInMonth(startDate, locale, firstDayOfWeek);\n\n  return (\n    <tbody\n      {...filterDOMProps(props as any)}\n      ref={ref}\n      style={style}\n      className={className || 'react-aria-CalendarGridBody'}>\n      {[...new Array(weeksInMonth).keys()].map((weekIndex) => (\n        <tr key={weekIndex}>\n          {state.getDatesInWeek(weekIndex, startDate).map((date, i) => (\n            date\n              ? React.cloneElement(children(date), {key: i})\n              : <td key={i} />\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\n/**\n * A calendar grid body displays a grid of calendar cells within a month.\n */\nconst CalendarGridBodyForwardRef = /*#__PURE__*/ (forwardRef as forwardRefType)(CalendarGridBody);\nexport {CalendarGridBodyForwardRef as CalendarGridBody};\n\nexport interface CalendarCellProps extends RenderProps<CalendarCellRenderProps>, HoverEvents {\n  /** The date to render in the cell. */\n  date: CalendarDate\n}\n\n/**\n * A calendar cell displays a date cell within a calendar grid which can be selected by the user.\n */\nexport const CalendarCell = /*#__PURE__*/ (forwardRef as forwardRefType)(function CalendarCell({date, ...otherProps}: CalendarCellProps, ref: ForwardedRef<HTMLTableCellElement>) {\n  let calendarState = useContext(CalendarStateContext);\n  let rangeCalendarState = useContext(RangeCalendarStateContext);\n  let state = calendarState ?? rangeCalendarState!;\n  let {startDate: currentMonth} = useContext(InternalCalendarGridContext) ?? {startDate: state.visibleRange.start};\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let {cellProps, buttonProps, ...states} = useCalendarCell(\n    {date},\n    state,\n    buttonRef\n  );\n\n  let {hoverProps, isHovered} = useHover({...otherProps, isDisabled: states.isDisabled});\n  let {focusProps, isFocusVisible} = useFocusRing();\n  isFocusVisible &&= states.isFocused;\n  let isOutsideMonth = !isSameMonth(currentMonth, date);\n  let isSelectionStart = false;\n  let isSelectionEnd = false;\n  if ('highlightedRange' in state && state.highlightedRange) {\n    isSelectionStart = isSameDay(date, state.highlightedRange.start);\n    isSelectionEnd = isSameDay(date, state.highlightedRange.end);\n  }\n\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultChildren: states.formattedDate,\n    defaultClassName: 'react-aria-CalendarCell',\n    values: {\n      date,\n      isHovered,\n      isOutsideMonth,\n      isFocusVisible,\n      isSelectionStart,\n      isSelectionEnd,\n      ...states\n    }\n  });\n\n  let dataAttrs = {\n    'data-focused': states.isFocused || undefined,\n    'data-hovered': isHovered || undefined,\n    'data-pressed': states.isPressed || undefined,\n    'data-unavailable': states.isUnavailable || undefined,\n    'data-disabled': states.isDisabled || undefined,\n    'data-focus-visible': isFocusVisible || undefined,\n    'data-outside-visible-range': states.isOutsideVisibleRange || undefined,\n    'data-outside-month': isOutsideMonth || undefined,\n    'data-selected': states.isSelected || undefined,\n    'data-selection-start': isSelectionStart || undefined,\n    'data-selection-end': isSelectionEnd || undefined,\n    'data-invalid': states.isInvalid || undefined\n  };\n\n  return (\n    <td {...cellProps} ref={ref}>\n      <div {...mergeProps(filterDOMProps(otherProps as any), buttonProps, focusProps, hoverProps, dataAttrs, renderProps)} ref={buttonRef} />\n    </td>\n  );\n});\n"],"names":[],"version":3,"file":"Calendar.main.js.map"}