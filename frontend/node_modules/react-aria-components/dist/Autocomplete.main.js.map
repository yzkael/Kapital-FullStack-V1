{"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;;;;AAkBM,MAAM,0DAA+B,CAAA,GAAA,0BAAY,EAA0C;AAC3F,MAAM,yDAAoC,CAAA,GAAA,0BAAY,EAA4B;AAGlF,MAAM,0DAAuC,CAAA,GAAA,0BAAY,EAA2C;AAKpG,SAAS,0CAAsB,KAAwB;IAC5D,IAAI,MAAM,CAAA,GAAA,2CAAgB,EAAE,2CAA8B,MAAM,IAAI;IACpE,QAAQ,CAAA,GAAA,gCAAS,EAAE,KAAK;IACxB,IAAI,UAAC,MAAM,EAAC,GAAG;IACf,IAAI,QAAQ,CAAA,GAAA,6DAA4B,EAAE;IAC1C,IAAI,gBAAgB,CAAA,GAAA,mBAAK,EAAe;IAExC,IAAI,kBACF,cAAc,mBACd,eAAe,EACf,eAAe,mBAAmB,YAClC,QAAQ,EACT,GAAG,CAAA,GAAA,qDAAuB,EAAE;QAC3B,GAAG,CAAA,GAAA,8CAAmB,EAAE,MAAM;gBAC9B;uBACA;IACF,GAAG;IAEH,qBACE,0DAAC,CAAA,GAAA,kCAAO;QACN,QAAQ;YACN;gBAAC;gBAAmC;aAAM;YAC1C;gBAAC,CAAA,GAAA,4CAAiB;gBAAG;aAAe;YACpC;gBAAC,CAAA,GAAA,0CAAe;gBAAG;aAAe;YAClC;gBAAC;gBAAsC;8BACrC;qCACA;oBACA,eAAe;gBACjB;aAAE;SACH;OACA,MAAM,QAAQ;AAGrB","sources":["packages/react-aria-components/src/Autocomplete.tsx"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaAutocompleteProps, CollectionOptions, UNSTABLE_useAutocomplete} from '@react-aria/autocomplete';\nimport {AutocompleteState, UNSTABLE_useAutocompleteState} from '@react-stately/autocomplete';\nimport {mergeProps} from '@react-aria/utils';\nimport {Provider, removeDataAttributes, SlotProps, SlottedContextValue, useSlottedContext} from './utils';\nimport React, {createContext, RefObject, useRef} from 'react';\nimport {SearchFieldContext} from './SearchField';\nimport {TextFieldContext} from './TextField';\n\nexport interface AutocompleteProps extends AriaAutocompleteProps, SlotProps {}\n\ninterface InternalAutocompleteContextValue {\n  filterFn?: (nodeTextValue: string) => boolean,\n  collectionProps: CollectionOptions,\n  collectionRef: RefObject<HTMLElement | null>\n}\n\nexport const UNSTABLE_AutocompleteContext = createContext<SlottedContextValue<AutocompleteProps>>(null);\nexport const UNSTABLE_AutocompleteStateContext = createContext<AutocompleteState | null>(null);\n// This context is to pass the register and filter down to whatever collection component is wrapped by the Autocomplete\n// TODO: export from RAC, but rename to something more appropriate\nexport const UNSTABLE_InternalAutocompleteContext = createContext<InternalAutocompleteContextValue | null>(null);\n\n/**\n * A autocomplete combines a text input with a menu, allowing users to filter a list of options to items matching a query.\n */\nexport function UNSTABLE_Autocomplete(props: AutocompleteProps) {\n  let ctx = useSlottedContext(UNSTABLE_AutocompleteContext, props.slot);\n  props = mergeProps(ctx, props);\n  let {filter} = props;\n  let state = UNSTABLE_useAutocompleteState(props);\n  let collectionRef = useRef<HTMLElement>(null);\n\n  let {\n    textFieldProps,\n    collectionProps,\n    collectionRef: mergedCollectionRef,\n    filterFn\n  } = UNSTABLE_useAutocomplete({\n    ...removeDataAttributes(props),\n    filter,\n    collectionRef\n  }, state);\n\n  return (\n    <Provider\n      values={[\n        [UNSTABLE_AutocompleteStateContext, state],\n        [SearchFieldContext, textFieldProps],\n        [TextFieldContext, textFieldProps],\n        [UNSTABLE_InternalAutocompleteContext, {\n          filterFn,\n          collectionProps,\n          collectionRef: mergedCollectionRef\n        }]\n      ]}>\n      {props.children}\n    </Provider>\n  );\n};\n"],"names":[],"version":3,"file":"Autocomplete.main.js.map"}