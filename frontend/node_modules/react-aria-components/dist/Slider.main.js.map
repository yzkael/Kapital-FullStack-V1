{"mappings":"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","sources":["packages/react-aria-components/src/Slider.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaSliderProps, AriaSliderThumbProps, HoverEvents, mergeProps, Orientation, useFocusRing, useHover, useNumberFormatter, useSlider, useSliderThumb, VisuallyHidden} from 'react-aria';\nimport {ContextValue, Provider, RenderProps, SlotProps, useContextProps, useRenderProps, useSlot, useSlottedContext} from './utils';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {forwardRefType, RefObject} from '@react-types/shared';\nimport {LabelContext} from './Label';\nimport React, {createContext, ForwardedRef, forwardRef, HTMLAttributes, OutputHTMLAttributes, useContext, useRef} from 'react';\nimport {SliderState, useSliderState} from 'react-stately';\n\nexport interface SliderProps<T = number | number[]> extends Omit<AriaSliderProps<T>, 'label'>, RenderProps<SliderRenderProps>, SlotProps {\n  /**\n   * The display format of the value label.\n   */\n  formatOptions?: Intl.NumberFormatOptions\n}\n\nexport const SliderContext = createContext<ContextValue<SliderProps, HTMLDivElement>>(null);\nexport const SliderStateContext = createContext<SliderState | null>(null);\nexport const SliderTrackContext = createContext<ContextValue<SliderTrackContextValue, HTMLDivElement>>(null);\nexport const SliderOutputContext = createContext<ContextValue<SliderOutputContextValue, HTMLOutputElement>>(null);\n\nexport interface SliderRenderProps {\n  /**\n   * The orientation of the slider.\n   * @selector [data-orientation=\"horizontal | vertical\"]\n   */\n  orientation: Orientation,\n  /**\n   * Whether the slider is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * State of the slider.\n   */\n  state: SliderState\n}\n\n/**\n * A slider allows a user to select one or more values within a range.\n */\nexport const Slider = /*#__PURE__*/ (forwardRef as forwardRefType)(function Slider<T extends number | number[]>(props: SliderProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, SliderContext);\n  let trackRef = useRef<HTMLDivElement>(null);\n  let numberFormatter = useNumberFormatter(props.formatOptions);\n  let state = useSliderState({...props, numberFormatter});\n  let [labelRef, label] = useSlot();\n  let {\n    groupProps,\n    trackProps,\n    labelProps,\n    outputProps\n  } = useSlider({...props, label}, state, trackRef);\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: {\n      orientation: state.orientation,\n      isDisabled: state.isDisabled,\n      state\n    },\n    defaultClassName: 'react-aria-Slider'\n  });\n\n  let DOMProps = filterDOMProps(props);\n  delete DOMProps.id;\n\n  return (\n    <Provider\n      values={[\n        [SliderStateContext, state],\n        [SliderTrackContext, {...trackProps, ref: trackRef}],\n        [SliderOutputContext, outputProps],\n        [LabelContext, {...labelProps, ref: labelRef}]\n      ]}>\n      <div\n        {...DOMProps}\n        {...groupProps}\n        {...renderProps}\n        ref={ref}\n        slot={props.slot || undefined}\n        data-orientation={state.orientation}\n        data-disabled={state.isDisabled || undefined} />\n    </Provider>\n  );\n});\n\nexport interface SliderOutputProps extends RenderProps<SliderRenderProps> {}\ninterface SliderOutputContextValue extends Omit<OutputHTMLAttributes<HTMLOutputElement>, 'children' | 'className' | 'style'>, SliderOutputProps {}\n\n/**\n * A slider output displays the current value of a slider as text.\n */\nexport const SliderOutput = /*#__PURE__*/ (forwardRef as forwardRefType)(function SliderOutput(props: SliderOutputProps, ref: ForwardedRef<HTMLOutputElement>) {\n  [props, ref] = useContextProps(props, ref, SliderOutputContext);\n  let {children, style, className, ...otherProps} = props;\n  let state = useContext(SliderStateContext)!;\n  let renderProps = useRenderProps({\n    className,\n    style,\n    children,\n    defaultChildren: state.getThumbValueLabel(0),\n    defaultClassName: 'react-aria-SliderOutput',\n    values: {\n      orientation: state.orientation,\n      isDisabled: state.isDisabled,\n      state\n    }\n  });\n\n  return (\n    <output\n      {...otherProps}\n      {...renderProps}\n      ref={ref}\n      data-orientation={state.orientation || undefined}\n      data-disabled={state.isDisabled || undefined} />\n  );\n});\n\nexport interface SliderTrackRenderProps extends SliderRenderProps {\n  /**\n   * Whether the slider track is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface SliderTrackProps extends HoverEvents, RenderProps<SliderTrackRenderProps> {}\ninterface SliderTrackContextValue extends Omit<HTMLAttributes<HTMLElement>, 'children' | 'className' | 'style'>, SliderTrackProps {}\n\n/**\n * A slider track is a container for one or more slider thumbs.\n */\nexport const SliderTrack = /*#__PURE__*/ (forwardRef as forwardRefType)(function SliderTrack(props: SliderTrackProps, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, SliderTrackContext);\n  let state = useContext(SliderStateContext)!;\n  let {onHoverStart, onHoverEnd, onHoverChange, ...otherProps} = props;\n  let {hoverProps, isHovered} = useHover({onHoverStart, onHoverEnd, onHoverChange});\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-SliderTrack',\n    values: {\n      orientation: state.orientation,\n      isDisabled: state.isDisabled,\n      isHovered,\n      state\n    }\n  });\n\n  return (\n    <div\n      {...mergeProps(otherProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      data-hovered={isHovered || undefined}\n      data-orientation={state.orientation || undefined}\n      data-disabled={state.isDisabled || undefined} />\n  );\n});\n\nexport interface SliderThumbRenderProps {\n  /**\n   * State of the slider.\n   */\n  state: SliderState,\n  /**\n   * Whether this thumb is currently being dragged.\n   * @selector [data-dragging]\n   */\n  isDragging: boolean,\n  /**\n   * Whether the thumb is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the thumb is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the thumb is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the thumb is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean\n}\n\nexport interface SliderThumbProps extends Omit<AriaSliderThumbProps, 'label' | 'validationState'>, HoverEvents, RenderProps<SliderThumbRenderProps> {\n  /**\n   * A ref for the HTML input element.\n   */\n  inputRef?: RefObject<HTMLInputElement | null>\n}\n\n/**\n * A slider thumb represents an individual value that the user can adjust within a slider track.\n */\nexport const SliderThumb = /*#__PURE__*/ (forwardRef as forwardRefType)(function SliderThumb(props: SliderThumbProps, ref: ForwardedRef<HTMLDivElement>) {\n  let {\n    inputRef: userInputRef = null\n  } = props;\n  let state = useContext(SliderStateContext)!;\n  let {ref: trackRef} = useSlottedContext(SliderTrackContext)!;\n  let {index = 0} = props;\n  let defaultInputRef = useRef<HTMLInputElement>(null);\n  let inputRef = userInputRef || defaultInputRef;\n  let [labelRef, label] = useSlot();\n  let {thumbProps, inputProps, labelProps, isDragging, isFocused, isDisabled} = useSliderThumb({\n    ...props,\n    index,\n    trackRef: trackRef as RefObject<HTMLDivElement | null>,\n    inputRef,\n    label\n  }, state);\n\n  let {focusProps, isFocusVisible} = useFocusRing();\n  let {hoverProps, isHovered} = useHover(props);\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-SliderThumb',\n    values: {\n      state,\n      isHovered,\n      isDragging,\n      isFocused,\n      isFocusVisible,\n      isDisabled\n    }\n  });\n\n  let DOMProps = filterDOMProps(props);\n  delete DOMProps.id;\n\n  return (\n    <div\n      {...mergeProps(DOMProps, thumbProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      style={{...thumbProps.style, ...renderProps.style}}\n      data-hovered={isHovered || undefined}\n      data-dragging={isDragging || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-disabled={isDisabled || undefined}>\n      <VisuallyHidden>\n        <input ref={inputRef} {...mergeProps(inputProps, focusProps)} />\n      </VisuallyHidden>\n      <Provider\n        values={[\n          [LabelContext, {...labelProps, ref: labelRef}]\n        ]}>\n        {renderProps.children}\n      </Provider>\n    </div>\n  );\n});\n"],"names":[],"version":3,"file":"Slider.main.js.map"}