{"mappings":"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","sources":["packages/react-aria-components/src/DropZone.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, HoverEvents} from '@react-types/shared';\nimport {ContextValue, Provider, RenderProps, SlotProps, useContextProps, useRenderProps} from './utils';\nimport {DropOptions, mergeProps, useButton, useClipboard, useDrop, useFocusRing, useHover, useLocalizedStringFormatter, VisuallyHidden} from 'react-aria';\nimport {filterDOMProps, useLabels, useObjectRef, useSlotId} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isFocusable} from '@react-aria/focus';\nimport React, {createContext, ForwardedRef, forwardRef, useRef} from 'react';\nimport {TextContext} from './Text';\n\nexport interface DropZoneRenderProps {\n  /**\n   * Whether the dropzone is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the dropzone is focused, either via a mouse or keyboard.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the dropzone is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the dropzone is the drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * Whether the dropzone is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean\n}\n\nexport interface DropZoneProps extends Omit<DropOptions, 'getDropOperationForPoint' | 'ref' | 'hasDropButton'>, HoverEvents, RenderProps<DropZoneRenderProps>, SlotProps, AriaLabelingProps {}\n\nexport const DropZoneContext = createContext<ContextValue<DropZoneProps, HTMLDivElement>>(null);\n\n/**\n * A drop zone is an area into which one or multiple objects can be dragged and dropped.\n */\nexport const DropZone = forwardRef(function DropZone(props: DropZoneProps, ref: ForwardedRef<HTMLDivElement>) {\n  let {isDisabled = false} = props;\n  [props, ref] = useContextProps(props, ref, DropZoneContext);\n  let dropzoneRef = useObjectRef(ref);\n  let buttonRef = useRef<HTMLButtonElement>(null);\n  let {dropProps, dropButtonProps, isDropTarget} = useDrop({...props, ref: buttonRef, hasDropButton: true});\n  let {buttonProps} = useButton(dropButtonProps || {}, buttonRef);\n  let {hoverProps, isHovered} = useHover(props);\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, 'react-aria-components');\n\n  let textId = useSlotId();\n  let ariaLabel = props['aria-label'] || stringFormatter.format('dropzoneLabel');\n  let messageId = props['aria-labelledby'];\n  let ariaLabelledby = [textId, messageId].filter(Boolean).join(' ');\n  let labelProps = useLabels({'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby});\n\n\n  let {clipboardProps} = useClipboard({\n    isDisabled,\n    onPaste: (items) => props.onDrop?.({\n      type: 'drop',\n      items,\n      x: 0,\n      y: 0,\n      dropOperation: 'copy'\n    })\n  });\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: {isHovered, isFocused, isFocusVisible, isDropTarget, isDisabled},\n    defaultClassName: 'react-aria-DropZone'\n  });\n  let DOMProps = filterDOMProps(props);\n  delete DOMProps.id;\n\n  return (\n    <Provider\n      values={[\n        [TextContext, {id: textId, slot: 'label'}]\n      ]}>\n      {/* eslint-disable-next-line */}\n      <div\n        {...mergeProps(dropProps, hoverProps, DOMProps)}\n        {...renderProps}\n        slot={props.slot || undefined}\n        ref={dropzoneRef}\n        onClick={(e) => {\n          let target = e.target as HTMLElement | null;\n          while (target && dropzoneRef.current?.contains(target)) {\n            if (isFocusable(target)) {\n              break;\n            } else if (target === dropzoneRef.current) {\n              buttonRef.current?.focus();\n              break;\n            }\n\n            target = target.parentElement;\n          }\n        }}\n        data-hovered={isHovered || undefined}\n        data-focused={isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-drop-target={isDropTarget || undefined}\n        data-disabled={isDisabled || undefined}>\n        <VisuallyHidden>\n          <button\n            {...mergeProps(buttonProps, focusProps, clipboardProps, labelProps)}\n            ref={buttonRef} />\n        </VisuallyHidden>\n        {renderProps.children}\n      </div>\n    </Provider>\n  );\n});\n"],"names":[],"version":3,"file":"DropZone.module.js.map"}