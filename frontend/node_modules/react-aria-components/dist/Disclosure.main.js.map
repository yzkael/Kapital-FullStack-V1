{"mappings":"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","sources":["packages/react-aria-components/src/Disclosure.tsx"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDisclosureProps, useDisclosure} from '@react-aria/disclosure';\nimport {ButtonContext} from './Button';\nimport {ContextValue, DEFAULT_SLOT, Provider, RenderProps, SlotProps, useContextProps, useRenderProps} from './utils';\nimport {DisclosureGroupState, DisclosureState, DisclosureGroupProps as StatelyDisclosureGroupProps, useDisclosureGroupState, useDisclosureState} from '@react-stately/disclosure';\nimport {DOMProps, forwardRefType, Key} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, mergeRefs, useId} from '@react-aria/utils';\nimport React, {createContext, DOMAttributes, ForwardedRef, forwardRef, ReactNode, useContext} from 'react';\nimport {useFocusRing} from 'react-aria';\n\nexport interface DisclosureGroupProps extends StatelyDisclosureGroupProps, RenderProps<DisclosureGroupRenderProps>, DOMProps {}\n\nexport interface DisclosureGroupRenderProps {\n  /**\n   * Whether the disclosure group is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * State of the disclosure group.\n   */\n  state: DisclosureGroupState\n}\n\nexport const DisclosureGroupStateContext = createContext<DisclosureGroupState | null>(null);\n\n/**\n * A DisclosureGroup is a grouping of related disclosures, sometimes called an accordion.\n * It supports both single and multiple expanded items.\n */\nexport const DisclosureGroup = forwardRef(function DisclosureGroup(props: DisclosureGroupProps, ref: ForwardedRef<HTMLDivElement>) {\n  let state = useDisclosureGroupState(props);\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-DisclosureGroup',\n    values: {\n      isDisabled: state.isDisabled,\n      state\n    }\n  });\n\n  let domProps = filterDOMProps(props);\n\n  return (\n    <div\n      {...domProps}\n      {...renderProps}\n      ref={ref}\n      data-disabled={props.isDisabled || undefined}>\n      <DisclosureGroupStateContext.Provider value={state}>\n        {renderProps.children}\n      </DisclosureGroupStateContext.Provider>\n    </div>\n  );\n});\n\nexport interface DisclosureProps extends Omit<AriaDisclosureProps, 'children'>, RenderProps<DisclosureRenderProps>, SlotProps {\n  /** An id for the disclosure when used within a DisclosureGroup, matching the id used in `expandedKeys`. */\n  id?: Key\n}\n\nexport interface DisclosureRenderProps {\n  /**\n   * Whether the disclosure is expanded.\n   * @selector [data-expanded]\n   */\n  isExpanded: boolean,\n  /**\n   * Whether the disclosure has keyboard focus.\n   * @selector [data-focus-visible-within]\n   */\n  isFocusVisibleWithin: boolean,\n  /**\n   * Whether the disclosure is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * State of the disclosure.\n   */\n  state: DisclosureState\n}\n\nexport const DisclosureContext = createContext<ContextValue<DisclosureProps, HTMLDivElement>>(null);\nexport const DisclosureStateContext = createContext<DisclosureState | null>(null);\n\ninterface InternalDisclosureContextValue {\n  panelProps: DOMAttributes<HTMLElement>,\n  panelRef: React.RefObject<HTMLDivElement | null>\n}\n\nconst InternalDisclosureContext = createContext<InternalDisclosureContextValue | null>(null);\n\n/**\n * A disclosure is a collapsible section of content. It is composed of a a header with a heading and trigger button, and a panel that contains the content.\n */\nexport const Disclosure = /*#__PURE__*/ (forwardRef as forwardRefType)(function Disclosure(props: DisclosureProps, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, DisclosureContext);\n  let groupState = useContext(DisclosureGroupStateContext)!;\n  let {id, ...otherProps} = props;\n\n  // Generate an id if one wasn't provided.\n  // (can't pass id into useId since it can also be a number)\n  let defaultId = useId();\n  id ||= defaultId;\n\n  let isExpanded = groupState ? groupState.expandedKeys.has(id) : props.isExpanded;\n  let state = useDisclosureState({\n    ...props,\n    isExpanded,\n    onExpandedChange(isExpanded) {\n      if (groupState) {\n        groupState.toggleKey(id);\n      }\n\n      props.onExpandedChange?.(isExpanded);\n    }\n  });\n\n  let panelRef = React.useRef<HTMLDivElement | null>(null);\n  let isDisabled = props.isDisabled || groupState?.isDisabled || false;\n  let {buttonProps, panelProps} = useDisclosure({\n    ...props,\n    isExpanded,\n    isDisabled\n  }, state, panelRef);\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = useFocusRing({within: true});\n\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    defaultClassName: 'react-aria-Disclosure',\n    values: {\n      isExpanded: state.isExpanded,\n      isDisabled,\n      isFocusVisibleWithin,\n      state\n    }\n  });\n\n  let domProps = filterDOMProps(otherProps as any);\n\n  return (\n    <Provider\n      values={[\n        [ButtonContext, {\n          slots: {\n            [DEFAULT_SLOT]: {},\n            trigger: buttonProps\n          }\n        }],\n        [InternalDisclosureContext, {panelProps, panelRef}],\n        [DisclosureStateContext, state]\n      ]}>\n      <div\n        ref={ref}\n        data-expanded={state.isExpanded || undefined}\n        data-disabled={isDisabled || undefined}\n        data-focus-visible-within={isFocusVisibleWithin || undefined}\n        {...domProps}\n        {...focusWithinProps}\n        {...renderProps}>\n        {renderProps.children}\n      </div>\n    </Provider>\n  );\n});\n\nexport interface DisclosurePanelRenderProps {\n  /**\n   * Whether keyboard focus is within the disclosure panel.\n   * @selector [data-focus-visible-within]\n   */\n  isFocusVisibleWithin: boolean\n}\n\nexport interface DisclosurePanelProps extends RenderProps<DisclosurePanelRenderProps>, DOMProps {\n  /**\n   * The accessibility role for the disclosure's panel.\n   * @default 'group'\n   */\n  role?: 'group' | 'region',\n  /**\n   * The children of the component.\n   */\n  children: ReactNode\n}\n\n/**\n * A DisclosurePanel provides the content for a disclosure.\n */\nexport const DisclosurePanel = /*#__PURE__*/ (forwardRef as forwardRefType)(function DisclosurePanel(props: DisclosurePanelProps, ref: ForwardedRef<HTMLDivElement>) {\n  let {role = 'group'} = props;\n  let {panelProps, panelRef} = useContext(InternalDisclosureContext)!;\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = useFocusRing({within: true});\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-DisclosurePanel',\n    values: {\n      isFocusVisibleWithin\n    }\n  });\n  let DOMProps = filterDOMProps(props);\n  return (\n    <div\n      {...DOMProps}\n      ref={mergeRefs(ref, panelRef)}\n      {...mergeProps(panelProps, focusWithinProps)}\n      {...renderProps}\n      role={role}\n      data-focus-visible-within={isFocusVisibleWithin || undefined}>\n      <Provider\n        values={[\n          [ButtonContext, null]\n        ]}>\n        {props.children}\n      </Provider>\n    </div>\n  );\n});\n"],"names":[],"version":3,"file":"Disclosure.main.js.map"}