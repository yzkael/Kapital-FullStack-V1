{"mappings":";;;AAAA;;;;;;;;;;CAUC;;AAyFM,MAAM,0DAAiB,CAAA,GAAA,oBAAY,EAA8B;AAGjE,MAAM,4CAAU,WAAW,GAAG,CAAA,GAAA,4BAAoB,EAAE,WAAW,CAAmB,OAAwB,KAAgC;IAC/I,IAAI,QAAC,IAAI,UAAE,MAAM,EAAC,GAAG,CAAA,GAAA,iBAAS,EAAE;IAChC,QAAQ,IAAI,CAAC,CAAC,qCAAqC,EAAE,KAAK,UAAU,CAAC;IACrE,OAAO,OAAO,OAAO,KAAK,SAAS;AACrC;AAmCO,MAAM,4CAAgD;IAC3D,gBAAe,cAAC,UAAU,uBAAE,mBAAmB,EAAC;QAC9C,OAAO,0CAAoB,YAAY,MAAM;IAC/C;IACA,kBAAiB,cAAC,UAAU,UAAE,MAAM,uBAAE,mBAAmB,EAAC;QACxD,OAAO,0CAAoB,YAAY,QAAQ;IACjD;AACF;AAEA,SAAS,0CACP,UAAsC,EACtC,MAA4B,EAC5B,mBAA2D;IAE3D,OAAO,CAAA,GAAA,wBAAgB,EAAE;QACvB,OAAO,SAAS,WAAW,WAAW,CAAE,OAAO,GAAG,IAAI;QACtD,cAAc;YAAC;SAAoB;QACnC,UAAS,IAAI;gBAYgB;YAX3B,IAAI,WAAW,KAAK,MAAM,CAAE;YAC5B,IAAI,CAAC,uBAAuB,KAAK,IAAI,KAAK,QACxC,OAAO;YAGT,IAAI,MAAM,KAAK,GAAG;YAClB,IAAI,WAAW,WAAW,WAAW,CAAC;YACtC,qBACE,kEACG,oBAAoB;gBAAC,MAAM;qBAAQ;gBAAK,cAAc;YAAQ,IAC9D,UACA,AAAE,CAAA,YAAY,QAAQ,EAAA,sBAAA,WAAW,OAAO,CAAC,uBAAnB,0CAAA,oBAA8B,IAAI,MAAK,MAAK,KAAO,oBAAoB;gBAAC,MAAM;qBAAQ;gBAAK,cAAc;YAAO;QAG7I;IACF;AACF;AAEO,MAAM,0DAA4B,CAAA,GAAA,oBAAY,EAAsB;AAEpE,SAAS,0CAAiB,UAAsB;IACrD,OAAO,CAAA,GAAA,cAAM,EAAE,IAAM,cAAc,OAAO,IAAI,IAAI;YAAC;SAAW,IAAI,MAAM;QAAC;KAAW;AACtF","sources":["packages/react-aria-components/src/Collection.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {CollectionBase, DropTargetDelegate, ItemDropTarget, Key, LayoutDelegate, RefObject} from '@react-types/shared';\nimport {createBranchComponent, useCachedChildren} from '@react-aria/collections';\nimport {Collection as ICollection, Node, SelectionBehavior, SelectionMode, SectionProps as SharedSectionProps} from 'react-stately';\nimport React, {createContext, ForwardedRef, HTMLAttributes, JSX, ReactElement, ReactNode, useContext, useMemo} from 'react';\nimport {StyleProps} from './utils';\n\nexport interface CollectionProps<T> extends Omit<CollectionBase<T>, 'children'> {\n  /** The contents of the collection. */\n  children?: ReactNode | ((item: T) => ReactNode),\n  /** Values that should invalidate the item cache when using dynamic collections. */\n  dependencies?: any[]\n}\n\nexport interface ItemRenderProps {\n  /**\n   * Whether the item is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the item is currently in a pressed state.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the item is currently selected.\n   * @selector [data-selected]\n   */\n  isSelected: boolean,\n  /**\n   * Whether the item is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the item is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean,\n  /**\n   * The type of selection that is allowed in the collection.\n   * @selector [data-selection-mode=\"single | multiple\"]\n   */\n  selectionMode: SelectionMode,\n  /** The selection behavior for the collection. */\n  selectionBehavior: SelectionBehavior,\n  /**\n   * Whether the item allows dragging.\n   * @note This property is only available in collection components that support drag and drop.\n   * @selector [data-allows-dragging]\n   */\n  allowsDragging?: boolean,\n  /**\n   * Whether the item is currently being dragged.\n   * @note This property is only available in collection components that support drag and drop.\n   * @selector [data-dragging]\n   */\n  isDragging?: boolean,\n  /**\n   * Whether the item is currently an active drop target.\n   * @note This property is only available in collection components that support drag and drop.\n   * @selector [data-drop-target]\n   */\n  isDropTarget?: boolean\n}\n\nexport interface SectionProps<T> extends Omit<SharedSectionProps<T>, 'children' | 'title'>, StyleProps {\n  /** The unique id of the section. */\n  id?: Key,\n  /** The object value that this section represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** Static child items or a function to render children. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** Values that should invalidate the item cache when using dynamic collections. */\n  dependencies?: any[]\n}\n\ninterface SectionContextValue {\n  name: string,\n  render: (props: SectionProps<any>, ref: ForwardedRef<HTMLElement>, section: Node<any>, className?: string) => ReactElement\n}\n\nexport const SectionContext = createContext<SectionContextValue | null>(null);\n\n/** @deprecated */\nexport const Section = /*#__PURE__*/ createBranchComponent('section', <T extends object>(props: SectionProps<T>, ref: ForwardedRef<HTMLElement>, section: Node<T>): JSX.Element => {\n  let {name, render} = useContext(SectionContext)!;\n  console.warn(`<Section> is deprecated. Please use <${name}> instead.`);\n  return render(props, ref, section, 'react-aria-Section');\n});\n\nexport interface CollectionBranchProps {\n  /** The collection of items to render. */\n  collection: ICollection<Node<unknown>>,\n  /** The parent node of the items to render. */\n  parent: Node<unknown>,\n  /** A function that renders a drop indicator between items. */\n  renderDropIndicator?: (target: ItemDropTarget) => ReactNode\n}\n\nexport interface CollectionRootProps extends HTMLAttributes<HTMLElement> {\n  /** The collection of items to render. */\n  collection: ICollection<Node<unknown>>,\n  /** A set of keys for items that should always be persisted in the DOM. */\n  persistedKeys?: Set<Key> | null,\n  /** A ref to the scroll container for the collection. */\n  scrollRef?: RefObject<HTMLElement | null>,\n  /** A function that renders a drop indicator between items. */\n  renderDropIndicator?: (target: ItemDropTarget) => ReactNode\n}\n\nexport interface CollectionRenderer {\n  /** Whether this is a virtualized collection. */\n  isVirtualized?: boolean,\n  /** A delegate object that provides layout information for items in the collection. */\n  layoutDelegate?: LayoutDelegate,\n  /** A delegate object that provides drop targets for pointer coordinates within the collection. */\n  dropTargetDelegate?: DropTargetDelegate,\n  /** A component that renders the root collection items. */\n  CollectionRoot: React.ComponentType<CollectionRootProps>,\n   /** A component that renders the child collection items. */\n  CollectionBranch: React.ComponentType<CollectionBranchProps>\n}\n\nexport const DefaultCollectionRenderer: CollectionRenderer = {\n  CollectionRoot({collection, renderDropIndicator}) {\n    return useCollectionRender(collection, null, renderDropIndicator);\n  },\n  CollectionBranch({collection, parent, renderDropIndicator}) {\n    return useCollectionRender(collection, parent, renderDropIndicator);\n  }\n};\n\nfunction useCollectionRender(\n  collection: ICollection<Node<unknown>>,\n  parent: Node<unknown> | null,\n  renderDropIndicator?: (target: ItemDropTarget) => ReactNode\n) {\n  return useCachedChildren({\n    items: parent ? collection.getChildren!(parent.key) : collection,\n    dependencies: [renderDropIndicator],\n    children(node) {\n      let rendered = node.render!(node);\n      if (!renderDropIndicator || node.type !== 'item') {\n        return rendered;\n      }\n\n      let key = node.key;\n      let keyAfter = collection.getKeyAfter(key);\n      return (\n        <>\n          {renderDropIndicator({type: 'item', key, dropPosition: 'before'})}\n          {rendered}\n          {((keyAfter == null || collection.getItem(keyAfter)?.type !== 'item')) && renderDropIndicator({type: 'item', key, dropPosition: 'after'})}\n        </>\n      );\n    }\n  });\n}\n\nexport const CollectionRendererContext = createContext<CollectionRenderer>(DefaultCollectionRenderer);\n\nexport function usePersistedKeys(focusedKey: Key | null) {\n  return useMemo(() => focusedKey != null ? new Set([focusedKey]) : null, [focusedKey]);\n}\n"],"names":[],"version":3,"file":"Collection.module.js.map"}